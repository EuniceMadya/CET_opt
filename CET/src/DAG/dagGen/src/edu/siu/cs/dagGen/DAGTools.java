package edu.siu.cs.dagGen;

import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Stack;

/**
 * This class contains static functions that are useful when working with a Directed Acyclic Graph such as the ones generated by this library.
 * @author crackerz
 *
 */
public class DAGTools {
	
	/**
	 * To debug or not to debug, that is the question.
	 */
	public static boolean log = false;
	
	/**
	 * Generates a string that represents the matrix in human readable form. Any wrapper class for DAGs may find this useful for
	 * overloading the toString() function for that object.
	 * @param matrix
	 * The matrix that we are printing as a DAG
	 * @return
	 * A human readable string that represents the matrix
	 */
	public static String printDAG(boolean[][] matrix) {
		StringBuilder result = new StringBuilder(matrix.length*(matrix[0].length*3));
		for(int i = 0; i < matrix.length; i++) {
			result.append("|");
			for(int j = 0; j<matrix[0].length;j++) {
				char c;
				if(matrix[i][j])
					c = '1';
				else
					c = '0';
				result.append(c+"|");
			}
			result.append("\n");
		}
		
		return result.toString();
	}
	
	/**
	 * Returns the number of edges connecting vertices in a Directed Acyclic Graph.
	 * This function does not ensure the graph is acyclic, it simply counts the number of true values in the 2D matrix.
	 * @param matrix
	 * The dependency adjacency matrix representing a DAG. 
	 * @return
	 */
	public static int getEdges(boolean[][] matrix) {
		int count = 0;
		for(int i = 0; i < matrix.length; i++)
			for(int j = 0; j < matrix[0].length; j++)
				if(matrix[i][j]) count++;
		return count;
	}

	/**
	 * Exports a DAG to a file. The format of the file is derived from dagman but is not compatible with dagman.
	 * @param matrix
	 * The DAG that will be converted to a file.
	 * @param FileName
	 * The name of the file we will save the generated matrix to
	 */
	public static void saveToFile(boolean[][] matrix, String FileName) {
		if(log)
			System.out.println("Smithing File Contents...");
		String result = smithFileContents(matrix);
		if(log)
			System.out.println("Writing File To Disk");
		writeFile(result, FileName);
	}
	
	private static String smithFileContents(boolean[][] matrix) {
		if(log)
			System.out.println("Assembling File Contents...");
		StringBuilder result = new StringBuilder("JOBCOUNT " + ((matrix[0].length>matrix.length)?matrix[0].length:matrix.length));
		Stack<Integer> stack = new Stack<Integer>();
		for(int i = 0; i < matrix[0].length; i++) {
			for(int j = 0; j < matrix.length; j++) {
				if(matrix[j][i]) {
					stack.push(new Integer(j));
				}
			}
			if(!stack.isEmpty()) {
				result.append("\n");
				result.append("PARENT " + i + " CHILD");
				while(stack.size()>0) {
					result.append(" " + stack.pop().toString());
				}
			}
			stack.clear();
		}
		return result.toString();
	}
	
	private static void writeFile(String contents, String FileName) {
		try {
			OutputStream stream = new FileOutputStream(FileName);
			BufferedOutputStream output = new BufferedOutputStream(stream,4096);
			for(int i = 0; i < contents.length(); i+=2048) {
				if(i+2048<contents.length())
					output.write(contents.substring(i, i+2048).getBytes());
				else
					output.write(contents.substring(i).getBytes());
			}
			if(log)
				System.out.println("Write Finished, Closing Stream");
			output.close();
			if(log)
				System.out.println("Stream closed");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
